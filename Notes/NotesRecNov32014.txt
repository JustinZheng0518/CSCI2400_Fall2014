Caching
	Imagine a triangle, divided horizontally.
	   /_\
	  /___\
	 /_____\
	 ...
	The base:
		Hard Disk (Secondary)			k+1		|  Speed/Cost Increased
		Main Memory						k		|  as you travel up the triangle
		L3 (3 levels of caches)					|
		L2										v
		L1
		L0 (all of your registers)
	The top of the triangle
	
	SSD - Solid State Drive: Flash storage, such fast, much cost...
	SATA - What this computer has, rotating disk drive, with a scanner. RPMS: 7200
	
	EX:
		int a[2][2] = { 1,2,
						3,4 };
		Main Memory (C/C++):
		---------------------
		| [ 1 | 2 | 3 | 4 ]	|
		|					|
		|					|
		|					|
		---------------------
		Cache
		---------------------
		| 	[ 1 | 2 ]		|
		|					|
		|					|
		|					|
		---------------------
		a[0][0], a[0][1] already in cache. if you are looking for it, finding it is faster than finding a[1][1], 4. 4 will be a cache miss, 
		which means it's not in the cache or register, and we must go to main memory to grab it, which is slow.
		
	EX:
		sum = 0;
		for(i = 0; i < 2; i++)
			for(j = 0; j < 2; j++)
				sum += a[i][j];
		
		Cache, after first iteration.
		---------------------
		| [ 1 | 2 | 3 | 4 ]	|
		|					|
		|					|
		|					|
		---------------------
		
		sum = 0;
		sum2 = 0;
		for(i = 0; i < 2; i++)
			for(j = 0; j < 2; j++)
			{
				sum += a[i][j];
				if (i == 0 && j == 0)
					sum2 = a[i][j];
			}
		Cache, after first iteration.
		---------------------
		| [ 1 | 2 | 3 | 4 ]	|
		|	Sum				|
		|	Sum2			|
		|					|
		---------------------
		LRU - Least recently used: Algorithm used to remove cache items, the least recently used item.
		In this EX, we will remove sum2, for it is least called, after a few cycles go, it will be removed.
		
	EX:
		for(i = 0; i < N; i++)
			for(j = 0; j < N; j++)
				for(k = 0; k < N; k++)
					sum += a[k][j][i];
		Doesn't go through a whole plane array, and moves through to the next plane. It jumps from plane to plane.
		NOTE: NOT in row major order, k j i... ---> i j k is Row major order